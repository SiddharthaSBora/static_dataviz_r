---
title: "Basic Data Visualization in R"
title-short: "R DataViz"
author: 
   - "Siddhartha Bora"
   - "Assistant Professor, West Virginia University"
date: "June 26, 2024"
date-format: long
format: 
  revealjs:
    auto-strech: true
    code-link: true
    incremental: true
    embed-resources: true
    grow: true
    smaller: true
    scrollable: true
---

# Background

## Slide 2

## Slide 3

## Slide 4

## Slide 5

## Disclaimers

-   The content of this presentation is based on the author's experience and knowledge of R, and represent an opinionated view of data visualizations.
-   R is vast and the content of this presentation is not exhaustive of all the data visualization features available in R. The author recognize that there are many other ways to visualize data in R.
-   The contents of this presentation are tailored to create static data visualizations for a competition.
-   The views and opinions expressed in this presentation are those of the author and do not necessarily reflect the official policy or position of any other agency, organization, employer or company.

# Wrangling Data Prior to Visualization

## Data Preprocessing takes most of the time

-   Data wrangling is the process of cleaning and transforming raw data into a format that is more suitable for analysis and visualization.
-   Data wrangling is often the most time-consuming part of the data analysis process.
-   The `tidyverse` package in R provides a set of tools for data wrangling that are designed to work together.

## Tidy Data Principles

1.  Each variable is a column; each column is a variable.
2.  Each observation is a row; each row is an observation.
3.  Each value is a cell; each cell is a single value.

Source: https://r4ds.hadley.nz/data-tidy

## Long vs Wide Data

-   Long data is better for visualization
-   Wide data is better for analysis
-   Use `pivot_longer` and `pivot_wider` functions in the `tidyverse` to convert data between long and wide formats

## Long Data Example

## Wide Data Example

## Data Wrangling for this presentation

- I am using a fraction of the data from the Local Food Economics Warehouse

## Data Wrangling for this presentation

::: panel-tabset
#### Code

```{r}
#| echo: true
#| eval: false
#| warning: false

library("tidyverse")


# load the data
df_foodaccess<-read_csv("./0_data/df_foodaccess.csv")
meta_foodaccess<-read_csv("./0_data/meta_foodaccess.csv")

# let's keep only overall_food_insecurity_rate and child_food_insecurity_rate
mydata<-df_foodaccess |>
  filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate"))

# inspect first 10 rows
head(mydata, 10)

# write data into a csv
write_csv(mydata, "./0_data/food_insecurity_dataviz.csv")


```

#### Output

```{r}
#| label: cleaned-dataset
#| echo: false
#| eval: true
#| warning: false


library("tidyverse")

# load the data
df_foodaccess<-read_csv("./0_data/df_foodaccess.csv")
meta_foodaccess<-read_csv("./0_data/meta_foodaccess.csv")

# let's keep only overall_food_insecurity_rate and child_food_insecurity_rate
df_foodsecurity<-df_foodaccess |>
  filter(variable_name %in% c("overall_food_insecurity_rate", 
                              "child_food_insecurity_rate")
         )
meta_foodsecurity<-meta_foodaccess |>
  filter(variable_name %in% c("overall_food_insecurity_rate", 
                              "child_food_insecurity_rate")
         )

# inspect first 10 rows
head(df_foodsecurity, 10)

head(meta_foodsecurity)

# write data into a csv
write_csv(df_foodsecurity, "./0_data/food_insecurity_dataviz.csv")



```
:::

# Data Visualization using ggplot2/Grammar of Graphics

## Grammar of Graphics


## Example: Food Insecurity in West Virginia

::: panel-tabset
#### Code

```{r}
#| label: wv-dataprep-chunk1
#| echo: true
#| eval: false
#| warning: false
# Subset data for WV
df_wv <- df_foodsecurity |> 
  filter(fips == "54") |>
  mutate(variable_name = fct_relevel(variable_name, "overall_food_insecurity_rate", 
                                     "child_food_insecurity_rate"),
         value = 100*value)

# line plot
head(df_wv)

```

#### Output

```{r}
#| label: wv-dataprep-chunk2
#| echo: false
#| eval: true
#| warning: false
# Subset data for WV
# Subset data for WV
df_wv <- df_foodsecurity |> 
  filter(fips == "54") |>
  mutate(variable_name = fct_relevel(variable_name, "overall_food_insecurity_rate", 
                                     "child_food_insecurity_rate"),
         value = 100*value)

# line plot
head(df_wv)

```
:::

## Example: Food Insecurity in WV

::: panel-tabset
#### Code

```{r}
#| label: basic-lineplot-chunk1
#| echo: true
#| eval: true
#| warning: false
#| output-location: column-fragment
#| tidy: true
#| tidy.opts: { width.cutoff: 60 }


# line plot
df_wv |>
  filter(variable_name == "overall_food_insecurity_rate") |>
  ggplot(aes(x = year, y = value)) +  
  geom_line()


```
I try to draw a basic lineplot.

#### Output

```{r}
#| label: basic-lineplot-chunk2
#| echo: false
#| eval: true
#| warning: false
#| fig-height: 3
# Subset data for WV
# line plot
df_wv |>
  filter(variable_name == "overall_food_insecurity_rate") |>
  ggplot(aes(x = year, y = value)) +  
  geom_line()

```
The plot works, but it is hardly readable.
:::


## Example: Food Insecurity in WV

::: panel-tabset
#### Code

Let's try plotting both variables

```{r}
#| label: wv-lineplot2-chunk1
#| echo: true
#| eval: false
#| warning: false

# create line plot for two variables
df_wv |>
  filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
  ggplot(aes(x = year, y = value, color = variable_name)) +  
  geom_line()


```

#### Output

```{r}
#| label: wv-lineplot2-chunk2
#| echo: false
#| eval: true
#| warning: false
#| fig-height: 3

# create line plot for two variables
df_wv |>
  filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
  ggplot(aes(x = year, y = value, color = variable_name)) +  
  geom_line()

```
:::


## Example: Food Insecurity in WV

::: panel-tabset
#### Code

Let's try doing barplots.

```{r}
#| label: wv-barplot1-chunk1
#| echo: true
#| eval: false
#| warning: false

# create barchart for two variables 
df_wv |>
  filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
  ggplot(aes(x = year, y = value, fill = variable_name)) +  
  geom_col(position = "dodge")


```

#### Output

```{r}
#| label: wv-barplot1-chunk2
#| echo: false
#| eval: true
#| warning: false

# create barchart for two variables 
df_wv |>
  filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
  ggplot(aes(x = year, y = value, fill = variable_name)) +  
  geom_col(position = "dodge")

```
:::


## Improving the Plot
-- I decided to make a barplot.
-- The plot works, but needs some improvement.
-- Improvements can take many forms, such as:
    - Adding labels
    - Adding title
    - Adding subtitle
    - Adding caption
    - Changing the color scheme
    - Changing the theme
    
-- I will try to improve it layer by layer

## Treat the Plot as an Object

::: panel-tabset
#### Code

```{r}
#| label: object-chunk1
#| echo: true
#| eval: false
#| warning: false

# treat the plot as an object
plot_1 <- df_wv |>
  filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
  ggplot(aes(x = year, y = value, fill = variable_name)) +  
  geom_col(position = "dodge")

plot_1<- plot_1+
  labs(title="Food Insecurity Rate in West Virginia", x="Year", y="%")+
  theme_minimal()

plot_1

```

#### Output

```{r}
#| label: object-chunk2
#| echo: false
#| eval: true
#| warning: false

# treat the plot as an object
plot_1 <- df_wv |>
  filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
  ggplot(aes(x = year, y = value, fill = variable_name)) +  
  geom_col(position = "dodge")

plot_1<- plot_1+
  labs(title="Food Insecurity Rate in West Virginia", x="Year", y="%")+
  theme_minimal()

plot_1


```
:::


## Further Improvements

::: panel-tabset
#### Code

```{r}
#| label: labels-chunk1
#| echo: true
#| eval: false
#| warning: false

plot_1 <- df_wv |>
  filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
  ggplot(aes(x = year, y = value, fill = variable_name)) +  
  geom_col(position = "dodge")+
  labs(title="Food Insecurity Rates in West Virginia", x="", y="%")+
  # break each year
  scale_x_continuous(breaks = seq(2011, 2021, 1))+
  # add value labels
  geom_text(aes(label = paste0(round(value, 1), "%")), 
            position = position_dodge(width = 1), 
            vjust = -0.5, size = 3)+
  # legend labels and name
  scale_fill_discrete(name = "", labels = c("Overall", "Child"))

plot_1
```

#### Output

```{r}
#| label: labels-chunk2
#| echo: false
#| eval: true
#| warning: false

plot_1 <- df_wv |>
  filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
  ggplot(aes(x = year, y = value, fill = variable_name)) +  
  geom_col(position = "dodge")+
  labs(title="Food Insecurity Rates in West Virginia", x="", y="%")+
  # break each year
  scale_x_continuous(breaks = seq(2011, 2021, 1))+
  # add value labels
  geom_text(aes(label = paste0(round(value, 1), "%")), 
            position = position_dodge(width = 1), 
            vjust = -0.5, size = 3)+
  # legend labels and name
  scale_fill_discrete(name = "", labels = c("Overall", "Child"))

plot_1

```
:::


## Improve theme

::: panel-tabset
#### Code

```{r}
#| label: improvetheme-chunk1
#| echo: true
#| eval: false
#| warning: false

plot_1 <- df_wv |>
  filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
  ggplot(aes(x = year, y = value, fill = variable_name)) +  
  geom_col(position = "dodge")+
  labs(title="Food Insecurity Rates in West Virginia", x="", y="%")+
  # break each year
  scale_x_continuous(breaks = seq(2011, 2021, 1))+
  # add value labels
  geom_text(aes(label = paste0(round(value, 1), "%")), 
            position = position_dodge(width = 1), 
            vjust = -0.5, size = 3)+
  # legend labels and name
  scale_fill_discrete(name = "", labels = c("Overall", "Child"))+
  theme_minimal()+
  theme(legend.position = "bottom",
        legend.title = element_text(size = 12),
        legend.text = element_text(size = 10),
        plot.title = element_text(size = 14, hjust = 0.5),
        axis.title = element_text(size = 12),
        axis.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())

plot_1

```

#### Output

```{r}
#| label: improvetheme-chunk2
#| echo: false
#| eval: true
#| warning: false

plot_1 <- df_wv |>
  filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
  ggplot(aes(x = year, y = value, fill = variable_name)) +  
  geom_col(position = "dodge")+
  labs(title="Food Insecurity Rates in West Virginia", x="", y="%")+
  # break each year
  scale_x_continuous(breaks = seq(2011, 2021, 1))+
  # add value labels
  geom_text(aes(label = paste0(round(value, 1), "%")), 
            position = position_dodge(width = 1), 
            vjust = -0.5, size = 3)+
  # legend labels and name
  scale_fill_discrete(name = "", labels = c("Overall", "Child"))+
  theme_minimal()+
  theme(legend.position = "bottom",
        legend.title = element_text(size = 12),
        legend.text = element_text(size = 10),
        plot.title = element_text(size = 14, hjust = 0.5),
        axis.title = element_text(size = 12),
        axis.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())

plot_1

```
:::

## Faceting 


::: panel-tabset
#### Code

```{r}
#| label: facet-chunk1
#| echo: true
#| eval: false
#| warning: false

# let's make graphs for both OH and WV
df_oh_wv <- df_foodsecurity |> 
  filter(fips %in% c("39","54")) |>
  # variable name factor relevel
  mutate(variable_name = fct_relevel(variable_name, "overall_food_insecurity_rate", 
                                     "child_food_insecurity_rate"),
         value = 100*value)

# treat the plot as an object
plot_3 <- df_oh_wv |>
  filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
  ggplot(aes(x = year, y = value, fill = variable_name)) +  
  geom_col(position = "dodge")+
  labs(title="Food Insecurity Rates in the Ohio and West Virginia", x="", y="%")+
  # break each year
  scale_x_continuous(breaks = seq(2011, 2021, 1))+
  # add value labels
  geom_text(aes(label = paste0(round(value, 1), "%")), 
            position = position_dodge(width = 1), 
            vjust = -0.5, size = 3)+
  # legend labels and name
  scale_fill_discrete(name = "", labels = c("Overall", "Child"))+
  theme_minimal()+
  theme(legend.position = "bottom",
        legend.title = element_text(size = 12),
        legend.text = element_text(size = 10),
        plot.title = element_text(size = 14, hjust = 0.5),
        axis.title = element_text(size = 12),
        axis.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())+
  facet_wrap(~state_name)

plot_3


```

#### Output

```{r}
#| label: facet-chunk2
#| echo: false
#| eval: true
#| warning: false

# let's make graphs for both OH and WV
df_oh_wv <- df_foodsecurity |> 
  filter(fips %in% c("39","54")) |>
  # variable name factor relevel
  mutate(variable_name = fct_relevel(variable_name, "overall_food_insecurity_rate", 
                                     "child_food_insecurity_rate"),
         value = 100*value)

# treat the plot as an object
plot_3 <- df_oh_wv |>
  filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
  ggplot(aes(x = year, y = value, fill = variable_name)) +  
  geom_col(position = "dodge")+
  labs(title="Food Insecurity Rates in the Ohio and West Virginia", x="", y="%")+
  # break each year
  scale_x_continuous(breaks = seq(2011, 2021, 1))+
  # add value labels
  geom_text(aes(label = paste0(round(value, 1), "%")), 
            position = position_dodge(width = 1), 
            vjust = -0.5, size = 3)+
  # legend labels and name
  scale_fill_discrete(name = "", labels = c("Overall", "Child"))+
  theme_minimal()+
  theme(legend.position = "bottom",
        legend.title = element_text(size = 12),
        legend.text = element_text(size = 10),
        plot.title = element_text(size = 14, hjust = 0.5),
        axis.title = element_text(size = 12),
        axis.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())+
  facet_wrap(~state_name)

plot_3
```
:::


## Reusing Code as functions

::: panel-tabset
#### Code

```{r}
#| label: barplot-functions-chunk1
#| echo: true
#| eval: false
#| warning: false

# Make a function to create the plot for any state
plot_food_insecurity_state <- function(state_fips){
  df_state <- df_foodsecurity |> 
    filter(fips == state_fips) |>
    # variable name factor relevel
    mutate(variable_name = fct_relevel(variable_name, "overall_food_insecurity_rate", 
                                       "child_food_insecurity_rate"))
  
  state_name <- df_state |>
    pull(state_name) |>
    unique()
  
  # treat the plot as an object
  plot_state <- df_state |>
    filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
    ggplot(aes(x = year, y = 100*value, fill = variable_name)) +  
    geom_col(position = "dodge")+
    labs(title=paste("Food Insecurity Rates in", state_name), x="", y="%")+
    # break each year
    scale_x_continuous(breaks = seq(2011, 2021, 1))+
    ylim(0, 40)+
    # add value labels
    geom_text(aes(label = paste0(round(100*value, 1), "%")), 
              position = position_dodge(width = 1), 
              vjust = -0.5, size = 3)+
    # legend labels and name
    scale_fill_discrete(name = "", labels = c("Overall", "Child"))+
    theme_minimal()+
    theme(legend.position = "bottom",
          legend.title = element_text(size = 12),
          legend.text = element_text(size = 10),
          plot.title = element_text(size = 14, hjust = 0.5),
          axis.title = element_text(size = 12),
          axis.text = element_text(size = 10),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank())
  
  return(plot_state)
}
  

# Let's try for Virginia
plot_food_insecurity_state("51")


```

#### Output

```{r}
#| label: barplot-functions-chunk2
#| echo: false
#| eval: true
#| warning: false

# Make a function to create the plot for any state
plot_food_insecurity_state <- function(state_fips){
  df_state <- df_foodsecurity |> 
    filter(fips == state_fips) |>
    # variable name factor relevel
    mutate(variable_name = fct_relevel(variable_name, "overall_food_insecurity_rate", 
                                       "child_food_insecurity_rate"))
  
  state_name <- df_state |>
    pull(state_name) |>
    unique()
  
  # treat the plot as an object
  plot_state <- df_state |>
    filter(variable_name %in% c("overall_food_insecurity_rate", "child_food_insecurity_rate")) |>
    ggplot(aes(x = year, y = 100*value, fill = variable_name)) +  
    geom_col(position = "dodge")+
    labs(title=paste("Food Insecurity Rates in", state_name), x="", y="%")+
    # break each year
    scale_x_continuous(breaks = seq(2011, 2021, 1))+
    ylim(0, 40)+
    # add value labels
    geom_text(aes(label = paste0(round(100*value, 1), "%")), 
              position = position_dodge(width = 1), 
              vjust = -0.5, size = 3)+
    # legend labels and name
    scale_fill_discrete(name = "", labels = c("Overall", "Child"))+
    theme_minimal()+
    theme(legend.position = "bottom",
          legend.title = element_text(size = 12),
          legend.text = element_text(size = 10),
          plot.title = element_text(size = 14, hjust = 0.5),
          axis.title = element_text(size = 12),
          axis.text = element_text(size = 10),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank())
  
  return(plot_state)
}
  

# Let's try for Virginia
plot_food_insecurity_state("51")
```
:::


## Arranging Plots

::: panel-tabset
#### Code

```{r}
#| label: arrange-chunk1
#| echo: true
#| eval: false
#| warning: false
# Arranging plots in a grid
library("gridExtra")
plot_wv<-plot_food_insecurity_state("54")
plot_va<-plot_food_insecurity_state("51")

# grid arrange and merge legends
grid.arrange(plot_wv, plot_va, ncol=2, top = "Food Insecurity Rates in West Virginia and Virginia")

```

#### Output

```{r}
#| label: arrange-chunk2
#| echo: false
#| eval: true
#| warning: false
# Arranging plots in a grid
library("gridExtra")
plot_wv<-plot_food_insecurity_state("54")
plot_va<-plot_food_insecurity_state("51")

# grid arrange and merge legends
grid.arrange(plot_wv, plot_va, ncol=2)

```
:::



# Different Types of Plots

-   Line Plot
-   Bar Plot
-   Scatter Plot
-   Box Plot
-   Histogram
-   Pie Chart
-   Heatmap
-   Map




## Tools for creating maps in R

-   There are many tools available in R for creating maps.
-   The most popular tools are:
    -   ggplot2
    -   tmap
    -   leaflet
    -   mapview
    -   sf
    
    


## Map Example 1: State Level Food Insecurity Rate

Prepare data for plotting the map.

```{r}
#| output: false
#| echo: true


library("tidyverse")
library("sf")
library("tigris")
library("kableExtra")

df_foodinsecurity<-read_csv("./0_data/food_insecurity_dataviz.csv")

# let's plot a map
df_states<-df_foodinsecurity |>
  filter(as.numeric(fips)<=56 & year ==2021 & state_name!="US")|>
  filter(variable_name == "overall_food_insecurity_rate")


states<-tigris::states(filter_by = c(xmin=-125, xmax=-66, ymin=24, ymax=50))|>
  left_join(df_states, by = join_by(GEOID==fips))

```

## Map of Overall Food Security in the US

::: panel-tabset
#### Code

```{r}
#| echo: true
#| eval: false
#| warning: false
#| fig-cap: "US Food Insecurity Rate"

# plot the map
ggplot(states, aes(fill=value))+
  geom_sf()+
  scale_fill_viridis_c()+
  labs(title="Food Insecurity Rate in the US", fill="Rate")+
  theme_minimal()

```

#### Output

```{r}
#| label: fig-us-states-food-insecurity
#| echo: false
#| eval: true
#| warning: false
#| fig-cap: "Overall Food Insecurity Rate, US States, 2021"

# plot the map
ggplot(states, aes(fill=value))+
  geom_sf()+
  scale_fill_viridis_c()+
  labs(title="Food Insecurity Rate in the US", fill="Rate")+
  theme_minimal()

```
:::

## County Level Map of West Virginia

::: panel-tabset
#### Code

```{r}
#| label: wvmap-chunk1
#| echo: true
#| eval: false
#| warning: false

# county level maps
df_states<-mydata |>
  filter(as.numeric(fips)>1000 & year ==2021 & state_name!="US")|>
  filter(variable_name == "overall_food_insecurity_rate")
wv_counties <- counties(state="WV")|>
  left_join(df_states, by = join_by(GEOID==fips))


# plot the map
ggplot(wv_counties, aes(fill=value))+
  geom_sf()+
  scale_fill_viridis_c()+
  labs(title="Food Insecurity Rate in WV", fill="Rate")+
  theme_minimal()



```
```{r}
#| output: false
#| echo: false
# county level maps
df_states<-df_foodinsecurity |>
  filter(as.numeric(fips)>1000 & year ==2021 & state_name!="US")|>
  filter(variable_name == "overall_food_insecurity_rate")
wv_counties <- counties(state="WV")|>
  left_join(df_states, by = join_by(GEOID==fips))

```

#### Output

```{r}
#| label: wvmap-chunk2
#| echo: false
#| eval: true
#| warning: false

# plot the map
ggplot(wv_counties, aes(fill=value))+
  geom_sf()+
  scale_fill_viridis_c()+
  labs(title="County Level Food Insecurity Rate in WV, 2021", fill="Rate")+
  theme_minimal()


```
:::


## Generalize using a function and make Ohio map

::: panel-tabset
#### Code

```{r}
#| label: ohiomap-chunk1
#| echo: true
#| eval: false
#| warning: false

plot_state_map<-function(df, state_name, variable_name, year){
  df_states<-df |>
    filter(as.numeric(fips)>1000 & year ==year & state_name==state_name)|>
    filter(variable_name == variable_name)
  
  counties <- counties(state=state_name)|>
    left_join(df_states, by = join_by(GEOID==fips))
  
  # plot the map
  ggplot(counties, aes(fill=value))+
    geom_sf()+
    scale_fill_viridis_c()+
    labs(title=paste(variable_name, "in", state_name), fill="Rate")+
    theme_minimal()
}

plot_state_map(df_foodinsecurity, "Ohio", "overall_food_insecurity_rate", 2015)

```

#### Output

```{r}
#| label: ohiomap-chunk2
#| echo: false
#| eval: true
#| warning: false
plot_state_map<-function(df, state_name, variable_name, year){
  df_states<-df |>
    filter(as.numeric(fips)>1000 & year ==year & state_name==state_name)|>
    filter(variable_name == variable_name)
  
  counties <- counties(state=state_name)|>
    left_join(df_states, by = join_by(GEOID==fips))
  
  # plot the map
  ggplot(counties, aes(fill=value))+
    geom_sf()+
    scale_fill_viridis_c()+
    labs(title=paste(variable_name, "in", state_name), fill="Rate")+
    theme_minimal()
}

plot_state_map(df_foodinsecurity, "Ohio", "child_food_insecurity_rate", 2021)

```
:::




## Infographics using Quarto

-  Quarto has been around a while.
-  Powerful tool for creating dynamic documents.
-  Can be useful for static visualizations as well.
-  In particular, visualization objects created in R can be easily embedded in Quarto documents.
-  Put together everything for infographic.

## Parameterized Infographics/Reports

- A powerful feature of Quarto is the ability to parameterize your documents. 
- This allows you to create a single document that can be rendered multiple times with different inputs. 
- While this competition is looking for static visualizations, parameterized infographics can still add dynamism to your submission while keeping the end product static.
- Let's see an example of how you can create a parameterized infographic in Quarto.


# Additional Resources on Diverse Topics

## R Workflow Related Resources

-   What They Forgot to Teach You About R: The stuff you need to know about R, besides data analysis. by Jennifer Bryan, Jennifer Bryan, Jim Hester, Shannon Pileggi, E. David Aja https://rstats.wtf/

-   Happy Git with R for the UseR by Jennifer Bryan, https://happygitwithr.com/

## Data/Codes relevant to the Challenge

-   Most information relevant to the challenge are available in the following resources. Most of the examples are already available in R/Quarto.
-   https://localfoodeconomics.com/data/access-the-data/
-   https://allison-bauman.quarto.pub/usda-ams-datametrics/
-   https://github.com/FoodSystemsModeling/DataWarehouse

## Useful Packages for Geospatial Analysis

-   `sf`
-   `terra`
-   `tmap`
-   `tidycensus`

## Useful DataViz Books

- [ggplot2: Elegant Graphics for Data Analysis (3e) was written by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen.](https://ggplot2-book.org/)

- [Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1: Basics : Oct 25, 2018 • Mel Moreno and Mathieu Basille](https://r-spatial.org/r/2018/10/25/ggplot2-sf.html)

- [R for Data Science (2e) was written by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund.](https://r4ds.hadley.nz/)

- [Modern Data Visualization with R by Robert Kabacoff](https://rkabacoff.github.io/datavis/)

## Useful DataViz Galleries


- [The R Graph Gallery](https://r-graph-gallery.com/)

- [ggplot2 extensions - gallery](https://exts.ggplot2.tidyverse.org/gallery/)

- [R Gallery Book by Kyle W. Brown](https://bookdown.org/content/b298e479-b1ab-49fa-b83d-a57c2b034d49/distributions.html#violin)

- [R CHARTS by R CODER](https://r-charts.com/)

- [The Python Graph Gallery](https://python-graph-gallery.com/)


## Tools for Interactive Visualizations

- [The R Graph Gallery](https://r-graph-gallery.com/interactive-charts.html)

- [Interactive web-based data visualization with R, plotly, and shiny by Carson Sievert](https://plotly-r.com/)

- [Modern Data Visualization with R by Robert Kabacoff (Chapter 13)](https://rkabacoff.github.io/datavis/)

- [Interactive visualization in R by Rebecca Barter](https://rebeccabarter.com/blog/2017-04-20-interactive)

- [Mastering Shiny by Hadley Wickham](https://mastering-shiny.org/)

## Accessibility Concerns

-   508 Compliance of Data Visualization
-   Accessible Color Themes

## Quarto Resources


- This revealjs slide deck is created using Quarto, and the .qmd file is available.

- [Quarto Guide](https://quarto.org/docs/guide/)

- [Quarto Tutorial](https://quarto.org/docs/get-started/hello/rstudio.html)

- [Learn R Markdown](https://pkgs.rstudio.com/rmarkdown/articles/rmarkdown.html)



## Acknowledgements

-   Clay Karnis helped me with some of the visualizations.
-   Ivy Mackereth shared her experience from the previous competition.
-   I thank organizers of the webinar for inviting me to share my experience.
-   Thanks everyone for listening, and good luck!

# Any Questions?
